name: (develop) Manual devnet deploy
on:
  workflow_dispatch:
    inputs:
      version:
        description: 'Devnet version tag'
        required: true
        type: string
        default: 'latest'

permissions:
  id-token: write
  contents: read

env:
  REGISTRY: "599564732950.dkr.ecr.us-east-2.amazonaws.com"
  REPOSITORY: "zksync-remix-plugin"
  DEV_CLUSTER: "zksync-remix-plugin-ecs-cluster"
  DEV_SERVICE_NAME: "rocket-development-svc"
  PROD_CLUSTER: "zksync-remix-plugin-production-ecs-cluster"
  PROD_SERVICE_NAME: "rocket-production-svc"
jobs:

  Build:
    runs-on: ubuntu-latest
    steps:
      - name: Clone repository
        uses: actions/checkout@v2
        with:
          fetch-depth: 0

      - name: Determine version numbers
        id: determine-version
        uses: paulhatch/semantic-version@v5.2.1
        with:
          tag_prefix: "v"
          major_pattern: "(MAJOR)"
          major_regexp_flags: ""
          minor_pattern: "(MINOR)"
          minor_regexp_flags: ""
          version_format: "${major}.${minor}.${patch}-dev${increment}"
          bump_each_commit: false
          bump_each_commit_patch_pattern: ""
          search_commit_body: false
          user_format_type: "csv"
          enable_prerelease_mode: true
          debug: false

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-region: us-east-2
          role-to-assume: arn:aws:iam::599564732950:role/Aws-GH-Action-Assume-Role-ZKSync
          role-session-name: GHZKSync

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1
        with:
          mask-password: 'true'

      - name: Build, tag, and push docker image to Amazon ECR
        env:
          REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          REPOSITORY: ${{ env.REPOSITORY }}
          IMAGE_TAG: ${{ steps.determine-version.outputs.version }} # ${{ github.run_number }}
          LATEST_RELEASE: ${{ inputs.version }}
        run: |
          docker build -t $REGISTRY/$REPOSITORY:devnet-$IMAGE_TAG -e $LATEST_RELEASE -f ./DockerfileDevnet .
          docker push $REGISTRY/$REPOSITORY:devnet-$IMAGE_TAG
    outputs:
      image-version: ${{ steps.determine-version.outputs.version }}
  Deploy_Dev:
    runs-on: ubuntu-latest
    #    needs: Build
    steps:

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-region: us-east-2
          role-to-assume: arn:aws:iam::599564732950:role/Aws-GH-Action-Assume-Role-ZKSync
          role-session-name: GHZKSync

      - name: Download task definition
        run: |
          aws ecs describe-task-definition --task-definition zksync-remix-development-devnet --query taskDefinition > task-definition.json

      - name: Update the task definition to use the image from Docker Hub
        id: task-def
        uses: aws-actions/amazon-ecs-render-task-definition@v1
        with:
          task-definition: task-definition.json
          container-name: "devnet"
          image: $REGISTRY/$REPOSITORY:devnet-${{ needs.Build.outputs.image-version }}

      - name: Deploy Amazon ECS task definition
        uses: aws-actions/amazon-ecs-deploy-task-definition@v1
        with:
          task-definition: ${{ steps.task-def.outputs.task-definition }}
          service: ${{ env.DEV_SERVICE_NAME }}
          cluster: ${{ env.DEV_CLUSTER }}
          wait-for-service-stability: true
#  Deploy_Prod:
#    if: github.ref == 'refs/heads/starknet-production-setup'
#    runs-on: ubuntu-latest
#    needs: Build
#    steps:
#
#      - name: Configure AWS credentials
#        uses: aws-actions/configure-aws-credentials@v1
#        with:
#          aws-region: us-east-2
#          role-to-assume: arn:aws:iam::228016254426:role/Aws-GH-Action-Assume-Role-Starknet-Production
#          role-session-name: GHStarknet
#
#      - name: Download task definition
#        run: |
#          aws ecs describe-task-definition --task-definition starknet-remix-production-rocket --query taskDefinition > task-definition.json
#
#      - name: Fill in the new image ID in the Amazon ECS task definition
#        id: task-def
#        uses: aws-actions/amazon-ecs-render-task-definition@v1
#        with:
#          task-definition: task-definition.json
#          container-name: "rocket"
#          image: ${{ env.REGISTRY }}/${{ env.REPOSITORY }}:apiserver-${{ needs.Build.outputs.image-version }}      #${{ github.run_number }}
#          # inject the expected React package URL for CORS logic
#          environment-variables: |
#            RUST_LOG=INFO
#            VITE_URL=https://cairo-remix-dev.nethermind.io
#            PROMTAIL_USERNAME=${{secrets.PROMTAIL_USERNAME}}
#            PROMTAIL_PASSWORD=${{secrets.PROMTAIL_PASSWORD}}
#
#      - name: Deploy Amazon ECS task definition
#        uses: aws-actions/amazon-ecs-deploy-task-definition@v1
#        with:
#          task-definition: ${{ steps.task-def.outputs.task-definition }}
#          service: ${{ env.PROD_SERVICE_NAME }}
#          cluster: ${{ env.PROD_CLUSTER }}
#          wait-for-service-stability: true
